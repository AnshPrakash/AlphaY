# python3
# generalising code for (5,5,5) ,(6,6,5) ,(6,6,6)
import sys
player_no=-1
board_size=-1
time_limit=-1
RUN_SIZE=-1
BOARD=[]
idxToHex5=[
	[ ( -1, -1 ), ( -1, -1 ), ( -1, -1 ), ( -1, -1 ), ( 5, 29 ), ( -1, -1 ), ( 5, 1 ), ( -1, -1 ), ( -1, -1 ),( -1, -1 ), ( -1, -1 ) ],
	[ ( -1, -1 ), ( -1, -1 ), ( -1, -1 ), ( 5, 28 ), ( -1, -1 ), ( 4, 0 ), ( -1, -1 ), ( 5, 2 ), ( -1, -1 ),( -1, -1 ), ( -1, -1 ) ],
	[ ( -1, -1 ), ( -1, -1 ), ( 5, 27 ), ( -1, -1 ), ( 4, 23 ), ( -1, -1 ), ( 4, 1 ), ( -1, -1 ), ( 5, 3 ),	( -1, -1 ), ( -1, -1 ) ],
	[ ( -1, -1 ), ( 5, 26 ), ( -1, -1 ), ( 4, 22 ), ( -1, -1 ), ( 3, 0 ), ( -1, -1 ), ( 4, 2 ), ( -1, -1 ),	( 5, 4 ), ( -1, -1 ) ],
	[ ( -1, -1 ), ( -1, -1 ), ( 4, 21 ), ( -1, -1 ), ( 3, 17 ), ( -1, -1 ), ( 3, 1 ), ( -1, -1 ), ( 4, 3 ),( -1, -1 ), ( -1, -1 ) ],
	[ ( -1, -1 ), ( 4, 20 ), ( -1, -1 ), ( 3, 16 ), ( -1, -1 ), ( 2, 0 ), ( -1, -1 ), ( 3, 2 ), ( -1, -1 ),( 4, 4 ), ( -1, -1 ) ],
	[ ( 5, 24 ), ( -1, -1 ), ( 3, 15 ), ( -1, -1 ), ( 2, 11 ), ( -1, -1 ), ( 2, 1 ), ( -1, -1 ), ( 3, 3 ),( -1, -1 ), ( 5, 6 ) ],
	[ ( -1, -1 ), ( 4, 19 ), ( -1, -1 ), ( 2, 10 ), ( -1, -1 ), ( 1, 0 ), ( -1, -1 ), ( 2, 2 ), ( -1, -1 ),( 4, 5 ), ( -1, -1 ) ],
	[ ( 5, 23 ), ( -1, -1 ), ( 3, 14 ), ( -1, -1 ), ( 1, 5 ), ( -1, -1 ), ( 1, 1 ), ( -1, -1 ), ( 3, 4 ),( -1, -1 ), ( 5, 7 ) ],
	[ ( -1, -1 ), ( 4, 18 ), ( -1, -1 ), ( 2, 9 ), ( -1, -1 ), ( 0, 0 ), ( -1, -1 ), ( 2, 3 ), ( -1, -1 ),( 4, 6 ), ( -1, -1 ) ],
	[ ( 5, 22 ), ( -1, -1 ), ( 3, 13 ), ( -1, -1 ), ( 1, 4 ), ( -1, -1 ), ( 1, 2 ), ( -1, -1 ), ( 3, 5 ),(-1, -1 ), ( 5, 8 ) ],
	[ ( -1, -1 ), ( 4, 17 ), ( -1, -1 ), ( 2, 8 ), ( -1, -1 ), ( 1, 3 ), ( -1, -1 ), ( 2, 4 ), ( -1, -1 ),( 4, 7 ), ( -1, -1 ) ],
	[ ( 5, 21 ), ( -1, -1 ), ( 3, 12 ), ( -1, -1 ), ( 2, 7 ), ( -1, -1 ), ( 2, 5 ), ( -1, -1 ), ( 3, 6 ),( -1, -1 ), ( 5, 9 ) ],
	[ ( -1, -1 ), ( 4, 16 ), ( -1, -1 ), ( 3, 11 ), ( -1, -1 ), ( 2, 6 ), ( -1, -1 ), ( 3, 7 ), ( -1, -1 ),( 4, 8 ), ( -1, -1 ) ],
	[ ( -1, -1 ), ( -1, -1 ), ( 4, 15 ), ( -1, -1 ), ( 3, 10 ), ( -1, -1 ), ( 3, 8 ), ( -1, -1 ), ( 4, 9 ),( -1, -1 ), ( -1, -1 ) ],
	[ ( -1, -1 ), ( 5, 19 ), ( -1, -1 ), ( 4, 14 ), ( -1, -1 ), ( 3, 9 ), ( -1, -1 ), ( 4, 10 ), ( -1, -1 ),( 5, 11 ), ( -1, -1 ) ],
	[ ( -1, -1 ), ( -1, -1 ), ( 5, 18 ), ( -1, -1 ), ( 4, 13 ), ( -1, -1 ), ( 4, 11 ), ( -1, -1 ), ( 5, 12 ),( -1, -1 ), ( -1, -1 ) ],
	[ ( -1, -1 ), ( -1, -1 ), ( -1, -1 ), ( 5, 17 ), ( -1, -1 ), ( 4, 12 ), ( -1, -1 ), ( 5, 13 ), ( -1, -1 ),( -1, -1 ), ( -1, -1 ) ],
	[ ( -1, -1 ), ( -1, -1 ), ( -1, -1 ), ( -1, -1 ), ( 5, 16 ), ( -1, -1 ), ( 5, 14 ), ( -1, -1 ), ( -1, -1 ),( -1, -1 ), ( -1, -1 ) ]
]

idxToHex6=[[(-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (6, 35), (-1, -1), (6, 1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
 [(-1, -1), (-1, -1), (-1, -1), (-1, -1), (6, 34), (-1, -1), (5, 0), (-1, -1), (6, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
 [(-1, -1), (-1, -1), (-1, -1), (6, 33), (-1, -1), (5, 29), (-1, -1), (5, 1), (-1, -1), (6, 3), (-1, -1), (-1, -1), (-1, -1)], 
 [(-1, -1), (-1, -1), (6, 32), (-1, -1), (5, 28), (-1, -1), (4, 0), (-1, -1), (5, 2), (-1, -1), (6, 4), (-1, -1), (-1, -1)], 
 [(-1, -1), (6, 31), (-1, -1), (5, 27), (-1, -1), (4, 23), (-1, -1), (4, 1), (-1, -1), (5, 3), (-1, -1), (6, 5), (-1, -1)], 
 [(-1, -1), (-1, -1), (5, 26), (-1, -1), (4, 22), (-1, -1), (3, 0), (-1, -1), (4, 2), (-1, -1), (5, 4), (-1, -1), (-1, -1)], 
 [(-1, -1), (5, 25), (-1, -1), (4, 21), (-1, -1), (3, 17), (-1, -1), (3, 1), (-1, -1), (4, 3), (-1, -1), (5, 5), (-1, -1)], 
 [(6, 29), (-1, -1), (4, 20), (-1, -1), (3, 16), (-1, -1), (2, 0), (-1, -1), (3, 2), (-1, -1), (4, 4), (-1, -1), (6, 7)], 
 [(-1, -1), (5, 24), (-1, -1), (3, 15), (-1, -1), (2, 11), (-1, -1), (2, 1), (-1, -1), (3, 3), (-1, -1), (5, 6), (-1, -1)], 
 [(6, 28), (-1, -1), (4, 19), (-1, -1), (2, 10), (-1, -1), (1, 0), (-1, -1), (2, 2), (-1, -1), (4, 5), (-1, -1), (6, 8)], 
 [(-1, -1), (5, 23), (-1, -1), (3, 14), (-1, -1), (1, 5), (-1, -1), (1, 1), (-1, -1), (3, 4), (-1, -1), (5, 7), (-1, -1)], 
 [(6, 27), (-1, -1), (4, 18), (-1, -1), (2, 9), (-1, -1), (-1, -1), (-1, -1), (2, 3), (-1, -1), (4, 6), (-1, -1), (6, 9)], 
 [(-1, -1), (5, 22), (-1, -1), (3, 13), (-1, -1), (1, 4), (-1, -1), (1, 2), (-1, -1), (3, 5), (-1, -1), (5, 8), (-1, -1)], 
 [(6, 26), (-1, -1), (4, 17), (-1, -1), (2, 8), (-1, -1), (1, 3), (-1, -1), (2, 4), (-1, -1), (4, 7), (-1, -1), (6, 10)], 
 [(-1, -1), (5, 21), (-1, -1), (3, 12), (-1, -1), (2, 7), (-1, -1), (2, 5), (-1, -1), (3, 6), (-1, -1), (5, 9), (-1, -1)],
 [(6, 25), (-1, -1), (4, 16), (-1, -1), (3, 11), (-1, -1), (2, 6), (-1, -1), (3, 7), (-1, -1), (4, 8), (-1, -1), (6, 11)],
 [(-1, -1), (5, 20), (-1, -1), (4, 15), (-1, -1), (3, 10), (-1, -1), (3, 8), (-1, -1), (4, 9), (-1, -1), (5, 10), (-1, -1)],
 [(-1, -1), (-1, -1), (5, 19), (-1, -1), (4, 14), (-1, -1), (3, 9), (-1, -1), (4, 10), (-1, -1), (5, 11), (-1, -1), (-1, -1)], 
 [(-1, -1), (6, 23), (-1, -1), (5, 18), (-1, -1), (4, 13), (-1, -1), (4, 11), (-1, -1), (5, 12), (-1, -1), (6, 13), (-1, -1)],
 [(-1, -1), (-1, -1), (6, 22), (-1, -1), (5, 17), (-1, -1), (4, 12), (-1, -1), (5, 13), (-1, -1), (6, 14), (-1, -1), (-1, -1)],
 [(-1, -1), (-1, -1), (-1, -1), (6, 21), (-1, -1), (5, 16), (-1, -1), (5, 14), (-1, -1), (6, 15), (-1, -1), (-1, -1), (-1, -1)],
 [(-1, -1), (-1, -1), (-1, -1), (-1, -1), (6, 20), (-1, -1), (5, 15), (-1, -1), (6, 16), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
 [(-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (6, 19), (-1, -1), (6, 17), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)]
]

def idxToHex_mapping(board_size,i,j):
	if board_size==5:
		return(idxToHex5[i][j])
	else:
		return(idxToHex6[i][j])

def getindex(board_size,hex_no,pos):
	Ci,Cj=-1,-1
	if board_size==5:
		Ci,Cj=9,5
	else:
		Ci,Cj=11,6
	if pos<0 or pos>6*hex_no-1:
		return((-1,-1))
	elif hex_no==board_size and pos%hex_no==0:
		return(-1,-1)
	v=pos//hex_no
	i,j=-1,-1
	if v==0:
		i,j=Ci -2 *hex_no+pos,Cj+pos
	elif v==1:
		i,j=Ci -hex_no+2*(pos%hex_no),Cj +hex_no
	elif v==2:
		i,j=Ci +hex_no+(pos%hex_no),Cj+hex_no- pos%hex_no
	elif v==3:
		i,j=Ci+2*hex_no-pos%hex_no,Cj-pos%hex_no
	elif v==4:
		i,j=Ci +hex_no-2*(pos%hex_no),Cj-hex_no
	elif v==5:
		i,j=Ci -hex_no-pos%hex_no,Cj -hex_no+pos%hex_no
	return((i,j))

def initial_config(board_size):
	Xdim=-1
	Ydim=-1
	if board_size==6:
		Xdim=23
		Ydim=13
	else:
		Xdim=19
		Ydim=11
	for i in range(0,Xdim):
		l=[]
		for j in range(0,Ydim):
			l.append("X")
		BOARD.append(l)
	for h in range(0,board_size+1):
		for p in range(0,6*h):
			i,j=getindex(board_size,h,p)
			if (h != board_size and p%h!= 0 or (i != -1 and j != -1)):
				BOARD[i][j] = "O"
	if board_size==6:
		BOARD[11][6]="O"
	else:
		BOARD[9][5]="O"

def showboard(gboard):
	for i in range(0,len(gboard)):
		for j in range(0,len(gboard[0])):
			if gboard[i][j]=="X":
				print(" "),
			else:
				print(gboard[i][j]+""),
		print("\n"),
				
		







if __name__ == '__main__':
	player_no=int(input())
	board_size=int(input())
	time_limit=int(input())
	RUN_SIZE=int(input())
	initial_config(5)
	showboard(BOARD)
	